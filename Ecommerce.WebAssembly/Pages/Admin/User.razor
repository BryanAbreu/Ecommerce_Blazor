@page "/user"
@page "/user/{id:int}"


@inject IUserService userservice
@inject IToastService toastservice
@inject NavigationManager _NavService

<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Title</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">
        <EditForm Model="model" OnValidSubmit="SavedChanges">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Complete Name</span>
                <input type="text" class="form-control" @bind-value="model.NombreCompleto">
            </div>
            <ValidationMessage For="@(()=>model.NombreCompleto)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Email</span>
                <input type="text" class="form-control" @bind-value="model.Correo"><br />
            </div>
            <ValidationMessage For="@(()=>model.Correo)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Password</span>
                <input type="password" class="form-control" @bind-value="model.Clave">
            </div>
            <ValidationMessage For="@(()=>model.Clave)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Confirm Password</span>
                <input type="password" class="form-control" @bind-value="model.ConfirmarClave">
            </div>
            <ValidationMessage For="@(()=>model.ConfirmarClave)" />

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@Buton</button>
                <a href="/users" class="btn btn-secondary" style="width:130px">Back</a>
            </div>
        </EditForm>


    </div>

</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string Title = "New User";
    private string Buton = "Create";
    private UsuarioDTO model= new UsuarioDTO();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = $"Edit User #{Id}";
            Buton = "Update";

            var response = await userservice.GetById(Id);
            if (response.EsCorrecto)
            {
                model = (UsuarioDTO)response.Response!;
                model.ConfirmarClave = model.Clave;
            }
            else
                toastservice.ShowError(response.Mensaje);
        }
    }

    private async Task SavedChanges()
    {
        if (model.Clave != model.ConfirmarClave)
        {
            toastservice.ShowError("password are diferent");
            return;
        }

        bool result = true;
        string message = string.Empty;

        if (Id != 0)
        {
            var responde = await userservice.Edit(model);
            if (responde.EsCorrecto)
                message = "User was Update";
            else
            {
                result = false;
                message = "can't update user";
            }
        }
        else
        {
            model.Rol = "administrador";
            var response = await userservice.Create(model);
            if (response.EsCorrecto)
            {
                message = "User was create";
            }
            else
            {
                result = false;
                message = "can't create user";
            }
        }
        if (result)
        {
            toastservice.ShowSuccess(message);
            _NavService.NavigateTo("/users");
        }
        else
        {
            toastservice.ShowWarning(message);
        }
    }
}
